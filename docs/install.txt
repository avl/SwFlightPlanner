
Dependencies

To install swflightplanner you need to install a large number of different
libraries. This guide is written with Ubuntu 10.10 in mind. It is possible
that package names could differ if using another distribution.

First, install the following dependencies:

sudo apt-get install python-cairo python-mapnik2 python-numpy poppler-utils \
pylons proj postgresql python-xml python-dev python-psycopg2 pyro authbind swig \
proj-bin scons swig libopenjpeg python-mechanize libboost-dev python-demjson python-pygrib libjasper-dev libpng-dev libgrib-api-dev python-pyproj


You also need the "python-grib" package. As root, do:

sudo bash
export JASPER_INCDIR=/usr/inc
export JASPER_LIBDIR=/usr/lib/i366-linux-gnu
export GRIBAPI_DIR=/usr
export PNG_DIR=/usr
export JPEG_DIR=/usr
easy_install pygrib

Note, it is important that the environment variables are set when running 
easy_install. Therefore, don't be tempted to do "sudo easy_install pygrib". 
Sudo clears environment variables.


Then you need the package shapemerge2d, which is not part of debian 
(at time of writing). Get it from github:

git clone git://github.com/avl/shapemerge2d.git

Install shapemerge2d by going to its directory, and running:

> scons

(You must install the 'scons' build tool, available in all
modern linux distributions)

There is a 'configure'-script in shapemerge2d, but it doesn't build
the python bindings for shapemerge2d, so it cannot be used. (Or rather,
you may use it, but it doesn't help).

Then, in order to have reasonably beautiful pdf-to-html conversion for AIP,
make sure you have poppler versoin 0.16 or above. Download and install
a newer local version else. The tool you need is "pdftohtml" .

You need to manage postgresql user authentication somehow.
The simplest way is probably to edit 
/etc/postgresql/8.4/main/pg_hba.conf
and change "ident" to "trust" for localhost connections.

You may need to restart postgres for this change to take effect:
/etc/init.d/postgresql restart

Prepare database user 'flightplanner':
(as root:)
su postgres
psql 
create ROLE "flightplanner" SUPERUSER LOGIN;


Then you need to change /etc/hosts so that "localhost" only appears for 
127.0.0.1, and not for ::1. (Otherwise adding postgres 'trust' for localhost
connections doesn't work). Many distributions already have this right, in which
case you don't need to do anything to the hosts-file.

Now, update the file "env.sh" to point to correct paths:
PYTHONPATH = Needs to point to shapemerge2d library and to directory where SwFlightplanner was checked out.
SWFP_DEVCOMP = The name of the computer primarily used for development. When app is run on this computer, certain things are configured in a way more suitable for development (longer cache life for downloaded airspace definition PDFs, for instance).
SWFP_DATADIR = Directory where temporary data should be created when generating maps, downloading NOTAMs, etc. This is also where "raw" map data needs to be put for maps to work.
SWFP_ROOT = The directory where SwFlightplanner was checked out.


Then create the database:
sudo ./resetdb.sh
WARNING! this removes the database if already present! You can ignore any error saying that database "flightplanner" does not exist.

Building the C++-component
A very small part of the application, namely the part that merges the 64x64
pixel uncompressed heightmaps into 256x256 color images, shading in different
colors depending on elevation, is written in C++.

To build this component you need the build-tool "scons", Gnu C++, and SWIG.
(Simple Wrapper Interface Generator). These will all be found in any
modern linux distribution. Then go to the root directory (the one with
the README-file), and type:

scons

An extension module for python, called _fplanquick.so will be built.


Obtaining 3D-party data

Two primary data sources need to be downloaded manually; SRTP and Openstreetmap.



SRTP

SRTP is the Shuttle Radar Topography mission, and contains elevation data for 
the entire earth. This data is available in chunks covering approximately 
40x60 degrees of the earth. The SRTP's webpage is:
http://www2.jpl.nasa.gov/srtm/. 
The actual data is linked to from that page.


Openstreetmap
You need to download an appropriate .osm-file for the part of the world
you wish to cover. You can download an .osm-file for the entire world,
but unless you plan to support the entire world in the application, this
will be needlessly slow to use. Get something like Sweden.osm for sweden.

http://wiki.openstreetmap.org/wiki/Mapnik/PostGIS#or_with_Ubuntu

Once you have installed openstreetmap, and unpacked a suitable .osm-file
into the postgres GIS database, you need to generate swflightplanner
bitmap tiles. This is slightly needlessly complicated.

First make sure you have "Pyro" installed (a python library for writing
distributed applications). Start the pyro nameserver:

> pyro-ns

Then start the map-generation server:
> python fplan/lib/tilegen_planner.py <output directory (choose any existing)>

This line creates a 'planner' for rendering a 'base'/'plain' map in the given
directory. Note, the planner keeps information about all tiles that will be
generated in memory. If you try to generate for the entire earth, you will need
a 64-bit system with lots and lots of memory.

Now, run any number of tile-generator workers:

> python fplan/lib/tilegen_worker.py

You should be able to run these at any number of machines (given that all machines
have a working openstreetmap-install, with preferably the exact same maps on them).
If you have a multi-cpu system, it may be advantageous to run multiple workers
even locally, since map rendering is often CPU-bound.



Customizing

The swflightplanner app was *not* made with extreme configurability in mind.
Instead, the focus was to "do one thing, and do it well". The one thing in 
this case is "help General Aviation VFR pilots to plan flights within Sweden".

Change Area Limits

However, it is not impossible to adapt the application to other areas. The
application has a concept of the "working area". It is impossible to scroll
outside of this area, for instance. This is defined in the file
fplan/lib/maptilereader.py, in the function "latlon_limits".
Note that the AIP-parser, and everything else about the program, is adapted
to Swedish (and to some extent, Nordic) conditions, so just changing the
area covered will not be enough to make the app usable outside of Sweden.

The program is known to fail in many places for negative longitudes. This
is mostly because of various pattern-matching functions not having support
for "west", and decimal lat/lon formats not supporting negative numbers.

There may also be a few places where distances are calculated in a mercator
projection, for approximate distance indications, and these will not work
at all when a track crosses the 180-degree longitude. However, exact distances
are calculated using the third-party 'proj' utility, which does of course
handle all these special cases properly.

Running
See the README-file in the project root for information on how to
run the application.



Library that is not required, but may be in the future.
pyshapelib (Not in ubuntu package repository, download separately. Needs separate download
of shapelib as well. Copy pyshapelib into shapelib dir, then sudo python
setup.py install). Shapelib was used to parse a file with all nation
boundaries in the world


